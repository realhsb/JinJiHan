name: Roll The Dice Backend CI/CD

defaults:
  run:
    shell: bash
    working-directory: ./backend/core

# Dev-backend 브랜치에 코드가 push 되거나 pull_request 되었을 때 이 파일의 내용이 실행됨
on:
  push:
    branches:
      - Dev-backend
  pull_request:
    branches:
      - Dev-backend

# Github Actions VM에서 읽을 수 있도록 허용
permissions:
  contents: read

# 실제 실행될 내용
jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.pull_request.base.ref == 'Dev-backend' || github.event_name == 'push' }}

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
          
      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "temurin"

      # gradle을 통해 소스 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # docker-compose.yml Secret Setup
      - name: Set Docker-compose.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: docker-compose.yml
        env:
          services.rabbitmq.environment.RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
          services.rabbitmq.environment.RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/backend-dev 가 위에서 만든 도커 repository.
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/backend-dev .
          docker push ${{ secrets.DOCKER_REPO }}/backend-dev

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 위에서 push한 내용을 pull 받아 실행
      # 실행 시, docker-compose를 사용
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/backend-dev
            cd ~/JinJiHan
            sudo docker-compose -f docker-compose.yml down
            sudo docker-compose -f docker-compose.yml up --build -d
